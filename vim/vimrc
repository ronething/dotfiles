set number
syntax on

" colorscheme
" cp ~/.vim/plugged/vim-hybrid/colors/hybrid.vim .
colorscheme darcula

let mapleader=','

" inoremap jj <Esc>`^

inoremap <leader>w <Esc>:w<cr>
noremap <leader>w :w<cr>

noremap <C-h> <C-w>h
noremap <C-l> <C-w>l
noremap <C-k> <C-w>k
noremap <C-j> <C-w>j

call plug#begin('~/.vim/plugged')

Plug 'mhinz/vim-startify'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Yggdroot/indentLine'
" theme
Plug 'blueshirts/darcula'
Plug 'scrooloose/nerdtree'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
" fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'brooth/far.vim'
Plug 'python-mode/python-mode', { 'for': 'python', 'branch': 'develop' }
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'lfv89/vim-interestingwords'
" for git
Plug 'tpope/vim-fugitive'
Plug 'junegunn/gv.vim'
Plug 'airblade/vim-gitgutter'


" for deoplete
if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'deoplete-plugins/deoplete-jedi'

" format
Plug 'sbdchd/neoformat'

" lint
Plug 'w0rp/ale'
Plug 'tpope/vim-commentary'

" go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" for ctags
" Plug 'ludovicchabant/vim-gutentags'

" Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}

call plug#end()

" ctrlp
" let g:ctrlp_map = '<c-p>'

" for nerdtree
nmap <leader>v :NERDTreeFind<cr>
nmap <leader>g :NERDTreeToggle<cr>
let NERDTreeShowHidden=1
let NERDTreeIgnore = [
            \ '\.git$', '\.hg$', '\.svn$', '\.stversions$', '\.pyc$', '\.pyo$', '\.svn$', '\.swp$',
            \ '\.DS_Store$', '\.sass-cache$', '__pycache__$', '\.egg-info$', '\.ropeproject$',
            \ ]

" for easy-motion
nmap ss <Plug>(easymotion-s2)

" python mode
let g:python3_host_prog = '/usr/local/bin/python3'
let g:pymode_python = 'python3'
let g:pymode_trim_whitespaces = 1
let g:pymode_doc=1
let g:pymode_doc_bind = 'K'
let g:pymode_rope_goto_definition_bind = "<C-]>"
let g:pymode_lint = 1
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'mccabe', 'pylint']
" let g:pymode_lint_ignore = "C0111, W0105, C0325"
let g:pymode_lint_ignore = "E402"
let g:pymode_options_max_line_length = 120

" tagbar
nnoremap <leader>t :TagbarToggle<cr>

" for deoplete
let g:deoplete#enable_at_startup = 1
set completeopt-=preview

" neoformat
let g:neoformat_enabled_python = ['autopep8']

" gitgutter
set updatetime=100

" for ctags
" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
" let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

" " 所生成的数据文件的名称 "
" let g:gutentags_ctags_tagfile = '.tags'

" " 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
" let s:vim_tags = expand('~/.cache/tags')
" let g:gutentags_cache_dir = s:vim_tags
" " 检测 ~/.cache/tags 不存在就新建 "
" if !isdirectory(s:vim_tags)
"    silent! call mkdir(s:vim_tags, 'p')
" endif

" " 配置 ctags 的参数 "
" let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
" let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
